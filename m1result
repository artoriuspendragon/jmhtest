

Result "com.afei.jmh.MyBenchmark.testStringBuilderAdd":
  0.027 ±(99.9%) 0.001 ms/op [Average]
  (min, avg, max) = (0.026, 0.027, 0.028), stdev = 0.001
  CI (99.9%): [0.027, 0.027] (assumes normal distribution)


# Run complete. Total time: 00:01:41

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                         Mode  Cnt  Score    Error  Units
MyBenchmark.testStringAdd         avgt   20  0.027 ±  0.001  ms/op
MyBenchmark.testStringBuilderAdd  avgt   20  0.027 ±  0.001  ms/op


------------------------------------------------------------------------------------
Result "com.afei.jmh.MyBenchmark.testStringBuilderAdd":
  0.810 ±(99.9%) 0.173 ms/op [Average]
  (min, avg, max) = (0.571, 0.810, 1.245), stdev = 0.200
  CI (99.9%): [0.637, 0.984] (assumes normal distribution)


# Run complete. Total time: 00:02:07

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                         Mode  Cnt  Score   Error  Units
MyBenchmark.testStringAdd         avgt   20  0.736 ± 0.129  ms/op
MyBenchmark.testStringBuilderAdd  avgt   20  0.810 ± 0.173  ms/op

